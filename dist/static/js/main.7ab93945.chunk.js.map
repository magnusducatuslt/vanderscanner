{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["HOST","App","useState","helper","setHelper","count","setCount","isLoading","setLoading","isError","setError","url","setUrl","isFirstLoad","file","setFile","useEffect","fetch","then","res","json","message","catch","e","console","log","className","src","autoPlay","onClick","preventDefault","window","open","a","rawResult","jsonResult","Fetch","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4NAGMA,G,MAAO,6BA+FEC,MA7Ff,WAAgB,IAAD,EACeC,mBAAS,+EADxB,mBACNC,EADM,KACEC,EADF,OAEaF,mBAAS,GAFtB,mBAENG,EAFM,KAECC,EAFD,OAGmBJ,oBAAS,GAH5B,mBAGNK,EAHM,KAGKC,EAHL,OAIeN,oBAAS,GAJxB,mBAINO,EAJM,KAIGC,EAJH,OAKSR,mBAAS,WALlB,mBAKNS,EALM,KAKDC,EALC,OAMuBV,oBAAS,GANhC,mBAMNW,EANM,aAOWX,mBAAS,KAPpB,mBAONY,EAPM,KAOAC,EAPA,KA0Cb,OAhBAC,qBAAU,WACRR,GAAW,GACXE,GAAS,GACTO,MAAM,GAAD,OAAIjB,GAAJ,OAAWW,IACbO,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACLP,EAAO,YACPJ,GAAW,GACXO,EAAQI,EAAIE,QAAQP,SAErBQ,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZb,GAAS,GACTF,GAAW,QAEd,CAACK,IAEF,yBAAKa,UAAU,OACb,0CACMvB,GADN,IACiBM,EAAU,sCAAmB,GAC3CF,EAAY,2CAAwB,IAGvC,8BACE,iCACE,yBAAKmB,UAAU,WACb,uKAAkCrB,GAAlC,yBAGHS,EACC,iCACE,yBAAKY,UAAU,eACf,yBAAKA,UAAU,SACb,2BACEC,IAAKb,EACLc,UAAQ,EACRC,QAAS,SAACN,GACRA,EAAEO,iBACFC,OAAOC,KAAK,oBAAqB,2BAGrC,4BACEN,UAAU,sBACVG,QAAS,kBAAMd,EAAQ,MAFzB,YASJ,iCACE,yBAAKW,UAAU,eACb,4BACEA,UAAU,0BACVG,QAAS,YAvEV,uCAAG,8BAAAI,EAAA,6DACZvB,GAAS,GACTF,GAAW,GAFC,kBAIcS,MAAM,GAAD,OAAIjB,GAAJ,OAAWW,IAJ9B,cAIJuB,EAJI,gBAKeA,EAAUd,OALzB,OAKJe,EALI,OAMV7B,EAAS6B,EAAWd,QAAQhB,OAC5BD,EAAU+B,EAAWd,QAAQlB,QAC7BY,EAAQoB,EAAWd,QAAQP,MAC3BN,GAAW,GATD,kDAWVA,GAAW,GACXE,GAAS,GAZC,0DAAH,qDAeX0B,KAsDU,gBAUR,4CCjFcC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.7ab93945.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nconst HOST = 'https://b8591132.ngrok.io';\n\nfunction App() {\n  const [helper, setHelper] = useState('Готов? погнали!');\n  const [count, setCount] = useState(0);\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState(false);\n  const [url, setUrl] = useState('/get/12');\n  const [isFirstLoad, setFirstLoad] = useState(true);\n  const [file, setFile] = useState('');\n  function banzai() {\n    const Fetch = async () => {\n      setError(false);\n      setLoading(true);\n      try {\n        const rawResult = await fetch(`${HOST}${url}`);\n        const jsonResult = await rawResult.json();\n        setCount(jsonResult.message.count);\n        setHelper(jsonResult.message.helper);\n        setFile(jsonResult.message.file);\n        setLoading(false);\n      } catch (e) {\n        setLoading(false);\n        setError(true);\n      }\n    };\n    Fetch();\n  }\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    fetch(`${HOST}${url}`)\n      .then((res) => res.json())\n      .then((res) => {\n        setUrl('/more/12');\n        setLoading(false);\n        setFile(res.message.file);\n      })\n      .catch((e) => {\n        console.log(e);\n        setError(true);\n        setLoading(false);\n      });\n  }, [isFirstLoad]);\n  return (\n    <div className=\"App\">\n      <header>\n        {`${helper}`} {isError ? <div>ALERT</div> : ''}\n        {isLoading ? <div>LOADING!!!</div> : ''}\n      </header>\n\n      <main>\n        <section>\n          <div className=\"counter\">\n            <span>Ты сделал красиво ровно {`${count}`} раз</span>\n          </div>\n        </section>\n        {file ? (\n          <section>\n            <div className=\"background\"></div>\n            <div className=\"modal\">\n              <video\n                src={file}\n                autoPlay\n                onClick={(e) => {\n                  e.preventDefault();\n                  window.open('https://1xbet.by/', 'height=200,width=200');\n                }}\n              ></video>\n              <button\n                className=\"modal__button_close\"\n                onClick={() => setFile('')}\n              >\n                Х\n              </button>\n            </div>\n          </section>\n        ) : (\n          <section>\n            <div className=\"interactive\">\n              <button\n                className=\"interactive__button_red\"\n                onClick={() => banzai('/more/12')}\n              >\n                BANZAI!!!\n              </button>\n            </div>\n          </section>\n        )}\n      </main>\n      <footer>footer</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}